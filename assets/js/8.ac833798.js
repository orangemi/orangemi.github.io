(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{213:function(t,e,a){"use strict";a.r(e);var s=a(2),r=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"正确姿势使用gitlab-ci"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正确姿势使用gitlab-ci","aria-hidden":"true"}},[t._v("#")]),t._v(" 正确姿势使用Gitlab CI")]),t._v(" "),a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[a("code",[t._v("Gitlab CI")]),t._v(" 是一个好工具，Teambition大多数项目的自动构建和部署开发环境都会使用。但我们在使用上有很多"),a("code",[t._v("安全")]),t._v("问题")]),t._v(" "),a("h2",{attrs:{id:"我们的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#我们的问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 我们的问题")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Teambition构建的时候需要安装依赖，在安装依赖的时候需要对应的权限，创建了一个超级image，赋予了gitlab的最高读取权限，可以读取任意repo。这样造成的问题是repo泄漏，当我们招募了一个实习生同学，虽然管理员只赋予了该同学某一个repo的权限，以及CI权限时，与此同时，也泄漏了整个gitlab的代码库。")])]),t._v(" "),a("li",[a("p",[t._v("Teambition后端项目都是基于docker标准化镜像，在构建过程中需要使用docker命令构建镜像以及发布镜像，而runner本身也是一个docker运行时，这样就是一个docker-in-docker的环境。Teambition在runner运行时将"),a("code",[t._v("宿主机")]),t._v("的docker sock 挂载到runner内部，而runner内部只需要有docker-cli就可以运行docker命令了。虽然方便，但泄漏了宿主机的docker，runner在执行中可能对宿主机造成攻击甚至是删除宿主机数据。")])]),t._v(" "),a("li",[a("p",[t._v("Teambition和大多数互联网公司一样，有一支自己的运维团队，所有发布和线上环境的操作都是运维操作的（或运维工具），开发同学在构建好镜像后需要触发运维的部署脚本才能发布。Gitlab CI 也有CI/CD的能力，为什么不使用呢？到底哪里阻碍了DevOps的发展？")])])]),t._v(" "),a("h2",{attrs:{id:"那应该怎么使用gitlab-ci工具呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#那应该怎么使用gitlab-ci工具呢","aria-hidden":"true"}},[t._v("#")]),t._v(" 那应该怎么使用Gitlab CI工具呢")]),t._v(" "),a("h3",{attrs:{id:"解决依赖安装及权限范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决依赖安装及权限范围","aria-hidden":"true"}},[t._v("#")]),t._v(" 解决依赖安装及权限范围")]),t._v(" "),a("p",[t._v("解决依赖安装，这个话题在gitlab-ce的issue列表中存在时间也"),a("a",{attrs:{href:"https://gitlab.com/gitlab-org/gitlab-ce/issues/18994",target:"_blank",rel:"noopener noreferrer"}},[t._v("非常的久远"),a("OutboundLink")],1),t._v("，至今有2,3年了，也经历了"),a("a",{attrs:{href:"https://docs.gitlab.com/ee/user/project/new_ci_build_permissions_model.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("重大重构"),a("OutboundLink")],1),t._v("。目前官方的方案就是利用"),a("code",[t._v("CI_JOB_TOKEN")]),t._v("。我们从头整理需求，这里的需要解决的场景有：")]),t._v(" "),a("ul",[a("li",[t._v("开发同学需要在本地开发")]),t._v(" "),a("li",[t._v("开发同学需要在本地构建")]),t._v(" "),a("li",[t._v("CI需要在CI环境运行测试")]),t._v(" "),a("li",[t._v("CI需要在CI环境构建")]),t._v(" "),a("li",[t._v("开发同学不能通过CI工具越权")])]),t._v(" "),a("p",[t._v("我们再看看"),a("code",[t._v("CI_JOB_TOKEN")]),t._v("在CI中的能力吧，我觉得在gitlab的文档没有特别指出这个token的用法和权限范围。我来来回回阅读了好几遍算是理解了，最后经过实际验证得到结论："),a("code",[t._v("CI_JOB_TOKEN")]),t._v("的权限范围就是用户的权限范围，两者是等价的。除了这个特性，"),a("code",[t._v("CI_JOB_TOKEN")]),t._v("还有几个特征可以利用：")]),t._v(" "),a("ul",[a("li",[t._v("只在构建过程中有效，从构建开始到构建结束。")]),t._v(" "),a("li",[t._v("在构建过程中不可见，不可打印在日志中。")]),t._v(" "),a("li",[t._v("如果是某个用户触发导致构建，CI_JOB_TOKEN是触发用户的权限范围。")]),t._v(" "),a("li",[t._v("如果是定时任务schedule或API触发trigger，CI_JOB_TOKEN以那trigger的主人视权限范围")]),t._v(" "),a("li",[t._v("CI_JOB_TOKEN亦可用于gitlab docker registry")]),t._v(" "),a("li",[t._v("CI_JOB_TOKEN等价于用户private access token (repo only)")])]),t._v(" "),a("p",[t._v("总的来说CI_JOB_TOKEN能够满足上面提到的场景。那应该如何做呢？")]),t._v(" "),a("h3",{attrs:{id:"本地运行时私有依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地运行时私有依赖","aria-hidden":"true"}},[t._v("#")]),t._v(" 本地运行时私有依赖")]),t._v(" "),a("p",[t._v("我们就拿nodejs项目来说吧。假如我们有给nodejs项目引用了一个私有仓库private-node-lib，通常通过"),a("code",[t._v("npm install --save git+ssh://git@gitlab-host/private-group/private-node-lib.git#v0.3.0")]),t._v("，最终该项目的package.json片段如下：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"demo-repo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"version"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.0.0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"dependencies"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"@tb/private-library"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git+ssh://git@gitlab-host/private-group/private-node-lib.git#v0.3.0"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("对于新接触这个项目的开发人员在本地开发时，使用"),a("code",[t._v("npm install")]),t._v("时，"),a("code",[t._v("git")]),t._v("会使用用户gitlab的git登录身份验证是否有权限，这一点原来也是OK的，如果实习生拥有demo-repo的权限，却没有依赖库的权限，将不能调试开发demo-repo项目，这是理想中的。No problem for local development!")]),t._v(" "),a("h3",{attrs:{id:"本地构建镜像的私有依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地构建镜像的私有依赖","aria-hidden":"true"}},[t._v("#")]),t._v(" 本地构建镜像的私有依赖")]),t._v(" "),a("p",[t._v("开发人员需要构建镜像时会有问题，一般我们的"),a("code",[t._v("Dockerfile")]),t._v("如下结构：")]),t._v(" "),a("div",{staticClass:"language-Dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('FROM node:10.15.3-alpine as dependency\nRUN apk --no-cache add git\n\nWORKDIR /app\nCOPY package* /app/\n\nRUN npm install --production\n\n# ready for production\nFROM node:10.15.3-alpine\n\nWORKDIR /app\nCOPY --from=dependency /app/node_modules /app/node_modules\nCOPY .  /app/\n\nEXPOSE 80 443\nCMD [ "npm", "start" ]\n')])])]),a("p",[t._v("如果同学不理解分步构建docker镜像的，请移步https://docs.docker.com/develop/develop-images/multistage-build ，或等下回详细介绍分步构建Docker镜像。")]),t._v(" "),a("p",[t._v("在本地开发环境，这个Dockerfile的构建将会失败，它的问题在于"),a("code",[t._v("RUN npm install")]),t._v("这一步，由于在镜像内执行"),a("code",[t._v("npm install")]),t._v("失去了宿主机上任何信息，包含已经登录过gitlab的ssh身份信息。那应该如何解决呢？")]),t._v(" "),a("p",[t._v("神奇的地方出现了，我们可以通过"),a("code",[t._v("git config")]),t._v("命令替换"),a("code",[t._v("remote-url")]),t._v("的方式获取权限，这一步需要用"),a("code",[t._v("private access token")]),t._v("来代替自己的ssh私钥获取相应的repo权限。具体方法如下：")]),t._v(" "),a("p",[t._v("首先，我们要在gitlab中生成一个"),a("code",[t._v("private access token")]),t._v("，具体方法参考：https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html ，这里稍稍翻译一下，在gitlab中右上角个人setting页面中找到access_token，然后生成一个read_repositry权限的access_token，并设置环境变量中"),a("code",[t._v("export CI_JOB_TOKEN=xxxx")]),t._v("，可以在你的"),a("code",[t._v("~/.bashrc")]),t._v("中添加这一行。")]),t._v(" "),a("p",[t._v("第二，在Dockerfile 中在"),a("code",[t._v("npm install")]),t._v("之前一步git config的替换")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('RUN git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab-host/".insteadOf "git://gitlab-host:" \\\n  && npm install\n')])])]),a("p",[t._v("第三，在执行构建镜像时，将环境变量因素加入到构建过程中（可以不填写具体的值）")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("docker build -t some_repo --build-arg CI_JOB_TOKEN .\n")])])]),a("p",[t._v("第四，虽然在命令行中指定了build_arg，但还需要在dockerfile 中确认使用arg参数")]),t._v(" "),a("div",{staticClass:"language-Dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("FROM node:10.15.3-alpine as dependency\nRUN apk --no-cache add git\nARG CI_JOB_TOKEN\n...\n")])])]),a("p",[t._v("完成上面这些步骤后，可以解决在本地环境中的构建问题，有同学会觉得会有些麻烦，因为感觉只需要自己的ssh私钥加入构建过程中就能解决，是的，但我们还要同时解决CI构建时的问题，个人ssh不能用于CI构建，下面我们来解决一下CI环境下运行和构建问题。")]),t._v(" "),a("h3",{attrs:{id:"ci环境中使用docker命令行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ci环境中使用docker命令行","aria-hidden":"true"}},[t._v("#")]),t._v(" CI环境中使用docker命令行")]),t._v(" "),a("p",[t._v("在讨论gitlab构建镜像前，首先要在CI环境中执行docker命令，而runner本身运行在docker中，这样就形成"),a("code",[t._v("docker-in-docker")]),t._v("的环境，根据"),a("a",{attrs:{href:"https://docs.gitlab.com/ee/ci/docker/using_docker_build.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Gitlab官方文档"),a("OutboundLink")],1),t._v("指导， 构建docker是最好不要使用宿主机上的docker.sock文件，因为这会泄漏宿主机的root权限，可能会有严重的安全隐患。官方推荐使用docker service作为依赖创建出一个纯净并隔离的环境。最基础的ci配置如下：")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("build-image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("stage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" build"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("image\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" docker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("stable "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只用docker官方镜像作为基础镜像，拥有docker命令行")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" docker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("dind "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用docker:dind作为依赖service，提供2375的tcp端口")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--insecure-registry=private-docker-registry-host"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("variables")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("DOCKER_HOST")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tcp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//docker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2375 ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 默认使用tcp来链接docker-machine")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("DOCKER_DRIVER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" overlay2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 优化docker-machine文件系统的优化")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("before_script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" docker info\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" docker login "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("u "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("DOCKER_USER"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("p $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("DOCKER_PASSWORD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("private"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("docker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("host"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" docker build "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("t .\n\n")])])]),a("p",[t._v("虽然在官方指导中，这个方式需要在注册runner时添加"),a("code",[t._v("--docker-privileged")]),t._v("参数，这个参数仍然会造成安全隐患，但目前只能期待docker官方想办法解决。")]),t._v(" "),a("p",[t._v("上述yaml中使用到了"),a("code",[t._v("docker:dind")]),t._v("这个镜像，这个镜像和原生"),a("code",[t._v("docker:stable")]),t._v("镜像没有功能上的差异，只是默认打开了tcp远程端口，如果在主机上长期开放tcp端口势必会带来安全隐患，现在只是在CI生命周期中开放，且外网无法联通，没有太大问题。")]),t._v(" "),a("p",[t._v("另外上述yaml中还用到了一个私有docker registry镜像地址，为的是方便推拉私有镜像，这里作者没有研究gitlab的docker registry的注册方法，认为他们是独立的2个服务。")]),t._v(" "),a("h3",{attrs:{id:"ci环境中使用构建docker镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ci环境中使用构建docker镜像","aria-hidden":"true"}},[t._v("#")]),t._v(" CI环境中使用构建docker镜像")]),t._v(" "),a("p",[t._v("有了上面2步的准备工作，已经可以在CI环境中正常使用"),a("code",[t._v("docker build")]),t._v("命令了")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("感觉写的已经有点长了，还有如何在CI中利用"),a("code",[t._v("docker cache")]),t._v("的问题还没有解决，这方面知识确实比较零散，无法简单的用一两句话说完。")]),t._v(" "),a("p",[t._v("PS. 这里好像忘了提devOps的问题，是的，这个问题更离散，还需读者拥有k8s或运维领域的相关知识。")])])},[],!1,null,null,null);e.default=r.exports}}]);